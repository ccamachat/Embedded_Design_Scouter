<!DOCTYPE html>
<!-- -------------------------------------------- -->
<!-- ---------------- MQTT DEBUG Monitor -------- -->
<!-- 
		Mashed up by: Mark McDermott   (from various sources)
		Project:      EE445L Lab 4E
		Date:         5/23/23
-->


<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<style>
#messages
{
background-color:rgb(11, 126, 161);
font-size:3;
font-weight:bold;
color:white;
line-height:140%;
width:100%;
height: 100px;
overflow:scroll;
}
#status
{
background-color:rgb(11, 126, 161);
font-size:3;
font-weight:bold;
color:white;
line-height:140%;
}

hr {
	border: none;
	height: 5px;
	/* Set the hr color */
	background-color: #2ca3b8;  /* Modern Browsers */
}

</style>

<!-- -------------------------------------------- -->
<!-- ---------------- HTML HEAD ----------------- -->

<head>
	<title>Lab 4E MQTT Monitor</title>

	<meta name="viewport" content="width=device-width, initial-scale=1.0">

	<script src="https://unpkg.com/mqtt/dist/mqtt.min.js"></script> 	
	<script type = "text/javascript" src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
		
	<!-- -------------------------------------------- -->
	<!-- ----------  JAVA Script Section  ----------- -->

	<script type = "text/javascript">
		
		//const mqtt = require('mqtt')
		var url = "";
		var options = {};
		var client;
		var connected_flag = 0;
		var reconnectTimeout = 3000;

		//Functions that update the DOM
		function set_status(status_str){
			console.log(status_str);
			document.getElementById("status").innerHTML = status_str;
		}

		function set_message(message_str){
			if(message_str != ""){
				console.log(message_str);
			}
			document.getElementById("messages").innerHTML = message_str;
		}

		function set_all(error_msg){
			console.log(error_msg);
			document.getElementById("status").innerHTML = error_msg;
			document.getElementById("messages").innerHTML = error_msg;
		}

		function append_message(message_str){
			console.log(message_str);
			document.getElementById("messages").innerHTML = message_str + "\n" + document.getElementById("messages").innerHTML;
		}

		//Functions that update the DOM
		function onConnectionLost(){
			connected_flag=0;
			set_all("connection lost");
		}
	
		function onFailure(message){
			connected_flag=0;
			set_all("Connection Failed, Retrying")
			setTimeout(MQTTRetryConnect, reconnectTimeout);	//Try again in reconnectTimeout ms
		}

		function onMessageArrived(data, topic){
			out_msg="Recv msg of topic '" + topic +"': "+data;
			append_message(out_msg);
		}


		function onConnect(){
			connected_flag=1
			set_status("Connected");
			set_message("");
		}


		function MQTTRetryConnect(){
			//Check if disconected. If we are already connected, skip so that there are not multiple instances
			if( connected_flag == 1){
				return false;
			} else {
				return MQTTconnect();
			}
		}

		function MQTTconnect(){

			
			//Read user config
			url = document.forms["connform"]["server"].value;
			options = {
				// Clean session
				clean: true,
				connectTimeout: 64000,
				keepalive: 600,
				// Authentication
				clientId: document.forms["connform"]["cid"].value,
				username: document.forms["connform"]["name"].value,
				password: document.forms["connform"]["pass"].value,
			}

			console.log("connecting to " + url + " using : ");
			console.log(options);
			client  = mqtt.connect(url, options)

			client.on('connect', function (connack) {
				if(connected_flag == 0){
					onConnect();	
				}
			})
			
			client.on('reconnect', function () {
				console.log('Reconnecting...')
			})

			client.on('close', function () {
				console.log('Closed, Reconnecting...')
			})

			client.on('disconnect', function (packet) {
				onConnectionLost()
			})

			client.on('error', function (error) {
				onFailure(error)
			})

			client.on('message', function (topic, payload, packet) {
				onMessageArrived(payload.toString(), topic)
			})
			
			return false;
		}

		function sub_topics(){
			
			if (connected_flag==0){
				set_message("Not Connected -- Subscribe failed");
				return false;
			}

			var stopic= document.forms["subs"]["Stopic"].value;

			client.subscribe(stopic, { qos: 0 }, function (error, granted) {
				if (error) {
					console.log(error)
					append_message("Failed to subscribe to topic : "+stopic)
				} else {
					append_message("Subscribed to topic : "+stopic)
				}
			})

			return false;
		}
		
		function send_button_message(char) {
			if (connected_flag == 0) {
				set_message("Not Connected -- Button failed");
				return false;
			}

			var msg = char;
			var topic = "ntg337_pt8352/w2b";

			// Send a test message with QoS of 0 to the testtopic
			client.publish(topic, msg, { qos: 0, retain: false }, function (error) {
				if (error) {
					console.log(error)
				} else {
					append_message("Sent msg to '" + topic + "': " + msg)
				}
			})

			return false;
		}

		function send_message(){

			if (connected_flag==0){
				set_message("Not Connected -- Send failed");
				return	false;
			}

			var msg = document.forms["smessage"]["message"].value;
			var topic = document.forms["smessage"]["Ptopic"].value;

			if (topic==""){
				topic = "test-topic"
			}

			// Send a test message with QoS of 0 to the testtopic
			client.publish(topic, msg, { qos: 0, retain: false }, function (error) {
				if (error) {
					console.log(error)
				} else {
					append_message("Sent msg to '"+topic+"': " + msg)
				}
			})
					
			return false;
		}

	</script>

</head>
	
 <!-- -------------------------------------------- -->
 <!-- -----------  BODY of the MQTT Monitor ------ --> 
	
<body>
	<h3>Lab 4E MQTT Monitor</h3>


	<div id="status">Status: Not Connected</div><br>

	<form name="connform" action="" onsubmit="return MQTTconnect()">
		Server:   	<input type="text"      name= "server"  value="ws://broker.emqx.io:8083/mqtt"><br><br>
		ClientID: 	<input type="text"      name= "cid"     value="NeilanPhebe"><br><br>
		UserName: 	<input type="text"      name= "name"    value=""><br><br>
		Password: 	<input type="text"      name= "pass"    value=""><br><br>
					<input type="submit"                    value="Connect">
	</form>
	
	<hr>
	<form name="subs" action="" onsubmit="return sub_topics()">
			Subscribe Topic:    <input type="text"      name="Stopic" value="ntg337_pt8352/b2w"> <br><br>
								<input type="submit"    value="Subscribe">
	</form> 

	<hr>
	<form name="smessage" action="" onsubmit="return send_message()">
			Publish Topic:      <input type="text"  name="Ptopic"  value= "ntg337_pt8352/w2b"> <br><br>
			Publish Message:    <input type="text"  name="message"><br><br>
								<input type="submit" value="Submit">
	</form>


	<hr>
	Received Messages:<textarea  id="messages">No Messages Yet.</textarea>
		

	</body>
</html>
